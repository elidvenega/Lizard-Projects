{"version":3,"sources":["components/NavBar.js","components/image/Image.js","components/text/Text.js","components/avatar/Avatar.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js","components/image/logo.png","components/avatar/lizard2.jpg","components/avatar/lizard3.jpg","components/avatar/lizard4.jpg"],"names":["withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","react_default","a","createElement","className","AppBar_default","position","style","backgroundColor","textAlign","Toolbar_default","Typography_default","variant","color","Image","Fragment","src","logo","width","alt","Text","Grid_default","container","spacing","item","xs","avatar","margin","bigAvatar","height","justify","alignItems","Avatar_default","lizard3","lizard2","lizard4","footer","marginTop","button","fontSize","padding","Footer","href","rel","target","App","NavBar","image_Image","text_Text","avatar_Avatar","footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.112b18e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  \r\n  \r\n};\r\n\r\nfunction ButtonAppBar(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" style={{backgroundColor:'#42a5f5', textAlign:'center'}} >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Lizard Project\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nButtonAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ButtonAppBar);","import React from 'react';\r\nimport './image.css';\r\nimport logo from './logo.png';\r\n\r\n const Image = () => {\r\n  return (\r\n   <React.Fragment>\r\n    <div className=\"eric\">\r\n    <div className=\"heading\">\r\n    Lizard Project</div>\r\n    <h1 className=\"info\">Using React</h1>\r\n    <img src={logo} style={{width:\"100px\"}} alt=\"logo\" />\r\n    </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Image;\r\n","import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './text.css';\r\n\r\nconst Text = () => {\r\n    return ( \r\n    <React.Fragment>\r\n        <h1 className=\"lizard\">About Lizards</h1>\r\n        <Grid container spacing={0}>\r\n        <Grid item xs={11}>\r\n        <h1 className=\"reptile\">Lizards</h1>\r\n        <p> Lizards are a widespread group of squamate reptiles, with over 6, 000 species, \r\n         ranging across all continents except Antarctica, as well as most oceanic island chains.\r\n        The group is paraphyletic as it excludes the snakes and Amphisbaenia; some lizards are more \r\n        closely related to these two excluded groups than they are to other lizards.Lizards range in \r\n        size from chameleons and geckos a few centimeters long to the 3 meter long Komodo dragon.\r\n        Most lizards are quadrupedal, running with a strong side - to - side motion.Others are legless, \r\n        and have long snake - like bodies.Some such as the forest - dwelling Draco lizards are able to \r\n        glide.They are often territorial, the males fighting off other males and signalling, often with \r\n        brightly colours, to attract mates and to intimidate rivals.Lizards are mainly carnivorous, \r\n        often being sit - and - wait predators; many smaller species eat insects,\r\n        while the Komodo eats mammals as big as water buffalo.Lizards make use of a variety of antipredator \r\n        adaptations, including venom, camouflage, reflex bleeding, and the ability to sacrifice and regrow \r\n        their tails. \r\n        </p> \r\n        </Grid>\r\n        \r\n        <Grid item xs={11}>\r\n        <h1 className=\"reptile\">Features</h1>\r\n        <p>Lizards typically have four legs, feet and external ears, though some are legless, while snakes \r\n         lack both of these characteristics. Lizards and snakes share a movable quadrate bone, distinguishing \r\n         them from the rhynchocephalians, which have more rigid diapsid skulls . Some lizards such as chameleons \r\n         have prehensile tails, assisting them in climbing among vegetation.As in other reptiles, the skin of lizards\r\n         is covered in overlapping scales made of keratin. This provides  protection from the environment and reduces \r\n         water loss through evaporation. This adaptation enables lizards to thrive in some of the driest deserts on \r\n         earth. The skin is tough and leathery, and is shed (sloughed) as the animal grows. Unlike snakes which shed \r\n         the skin in a single piece,lizards slough their skin in several pieces. The scales may be modified into spines \r\n         for display or protection, and some species have bone osteoderms underneath the scales. The dentitions of lizards \r\n         reflect their wide range of diets, including carnivorous, insectivorous, omnivorous, herbivorous, nectivorous, and \r\n         molluscivorous. Species typically have uniform teeth suited to their diet, but several species have variable teeth, \r\n         such as cutting teeth in the front of the jaws and crushing teeth in the rear. Most species are pleurodont, though agamids and \r\n         chameleons are acrodont.The tongue can be extended outside the mouth, and is often long. In the beaded lizards, whiptails and monitor \r\n         lizards, the tongue is forked and used mainly or exclusively to sense the environment, continually flicking out to sample the environment, \r\n         and back to transfer molecules to the vomeronasal organ responsible for chemosensation, analogous to but different from smell or taste. \r\n         In geckos, the tongue is used to lick the eyes clean: they have no eyelids. Chameleons have very long sticky tongues which can be extended\r\n          rapidly to catch their insect prey.\r\n         </p>\r\n         </Grid>\r\n\r\n         <Grid item xs={11}>\r\n        <h1 className=\"reptile\">Senses</h1>\r\n        <p>Lizards make use of their senses of sight, touch, olfaction and hearing like other vertebrates. The balance \r\n        of these  varies with the habitat of different species; for instance, skinks that live largely covered by loose \r\n        soil rely heavily on olfaction and touch, while geckos depend largely on acute vision for their ability to hunt and\r\n         to evaluate the distance to their prey before striking. Monitor lizards have acute vision, hearing, and olfactory \r\n         senses. Some lizards make unusual use of their sense organs: chameleons can steer their eyes in different directions, \r\n         sometimes providing non-overlapping fields of view, such as forwards and backwards at once. Lizards lack external ears,\r\n         having instead a circular opening in which the tympanic membrane (eardrum) can be seen. Many species rely on hearing for \r\n         early warning of predators, and flee at the slightest sound.As in snakes and many mammals, all lizards have a specialised \r\n         olfactory system, the vomeronasal organ, used to detect pheromones. Monitor lizards transfer scent from the tip of their tongue \r\n         to the organ; the tongue is used only for this information-gathering purpose, and is not involved in manipulating food.\r\n        Skeleton of bearded dragon (pogona sp.) on display at the Museum of Osteology.Some lizards, particularly iguanas, have retained a \r\n        photosensory organ on the top of their heads called the parietal eye, a basal (\"primitive\") feature also present in the tuatara. \r\n        This \"eye\" has only a rudimentary retina and lens and cannot form images, but is sensitive to changes in light and dark and can detect \r\n        movement. This helps them detect predators stalking it from above.</p>\r\n         </Grid>\r\n         </Grid>\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default Text;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport lizard2 from './lizard2.jpg';\r\nimport lizard3 from './lizard3.jpg';\r\nimport lizard4 from './lizard4.jpg';\r\n\r\nconst styles = {\r\n  avatar: {\r\n    margin: 10,\r\n  },\r\n  bigAvatar: {\r\n    margin: 10,\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n};\r\n\r\nfunction ImageAvatars(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\">\r\n      <Avatar alt=\"Remy Sharp\" src={lizard3} className={classes.bigAvatar} />\r\n      <Avatar alt=\"Remy Sharp\" src={lizard2} className={classes.bigAvatar} />\r\n      <Avatar alt=\"Remy Sharp\" src={lizard4} className={classes.bigAvatar} />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nImageAvatars.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImageAvatars);\r\n","import React from 'react'\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const Footer = () => {\r\n  return (\r\n    <div>\r\n      <footer style={footer}>\r\n        <div>\r\n         \r\n       <a href=\"http://www.instagram.com\" rel=\"noopener noreferrer\" target=\"_blank\"><i style={button} className=\"fab fa-instagram\"></i></a>\r\n       <a href=\"http://www.wikipedia.com\" rel=\"noopener noreferrer\" target=\"_blank\"><i style={button} className=\"fab fa-wikipedia-w\"></i></a>\r\n       <a href=\"http://www.youtube.com\" rel=\"noopener noreferrer\" target=\"_blank\"><i style={button} className=\"fab fa-youtube\"></i></a>\r\n       <a href=\"http://www.youtube.com\" rel=\"noopener noreferrer\" target=\"_blank\"><i style={button} className=\"fab fa-twitter\"></i></a>\r\n      </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n} \r\n\r\n\r\nconst footer = {\r\n  backgroundColor: '#42a5f5',\r\n  height: '150px',\r\n  marginTop: '50px',\r\n  textAlign: 'center'\r\n}\r\n\r\nconst button = {\r\n  marginTop: '30px',\r\n  fontSize: '70px',\r\n  color: '#fff',\r\n  padding: '15px'\r\n  \r\n \r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport NavBar from './components/NavBar';\nimport Image from './components/image/Image';\nimport Text from './components/text/Text';\nimport Avatar from './components/avatar/Avatar';\nimport Footer from './components/footer/Footer';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <Image />\n        <Text />\n        <Avatar />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.80687d23.png\";","module.exports = __webpack_public_path__ + \"static/media/lizard2.536697c7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lizard3.2babb8d7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lizard4.81ab7d43.jpg\";"],"sourceRoot":""}